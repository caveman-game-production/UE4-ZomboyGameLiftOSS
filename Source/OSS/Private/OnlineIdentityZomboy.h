// Copyright 1998-2018 Epic Games, Inc. All Rights Reserved.

#pragma once
 
#include "CoreMinimal.h"
#include "UObject/CoreOnline.h"
#include "OnlineSubsystemTypes.h"
#include "OnlineSubsystemZomboyTypes.h"
#include "OnlineDelegateMacros.h"
#include "Interfaces/OnlineIdentityInterface.h"

#if WITH_OCULUS
#include "OVR_Platform.h"
#endif

class FOnlineSubsystemZomboy;

/**
* Delegate used in block list change notifications
*
* @param LocalUserNum the controller number of the associated user that made the request
* @param ListName name of the friends list that was operated on
*/
DECLARE_MULTICAST_DELEGATE_ThreeParams(FOnLoadPlayerIconComplete, int32 /*LocalUserNum*/, bool /*bWasSuccessful*/, const FZomboyOnlinePlayerIconInfo& /*Player Icon Info*/);
typedef FOnLoadPlayerIconComplete::FDelegate FOnLoadPlayerIconCompleteDelegate;

/**
* Info associated with an user account generated by this online service
*/
class FUserOnlineAccountZomboy :
	public FUserOnlineAccount
{

public:

	// FOnlineUser

	virtual TSharedRef<const FUniqueNetId> GetUserId() const override { return UserIdPtr; }
	virtual FString GetRealName() const override { return Name; }
	virtual FString GetDisplayName(const FString& Platform = FString()) const override { return Name; }
	virtual bool GetUserAttribute(const FString& AttrName, FString& OutAttrValue) const override;
	virtual bool SetUserAttribute(const FString& AttrName, const FString& AttrValue) override;

	// FUserOnlineAccount

	virtual FString GetAccessToken() const override { return TEXT("DummyAuthTicket"); }
	virtual bool GetAuthAttribute(const FString& AttrName, FString& OutAttrValue) const override;

	// FUserOnlineAccountNull

	FUserOnlineAccountZomboy(const TSharedRef<const FUniqueNetId>& InUserId, const FString& InName)
		: UserIdPtr(InUserId),
		Name(InName)
	{ }

	virtual ~FUserOnlineAccountZomboy()
	{
	}

	/** User Id represented as a FUniqueNetId */
	TSharedRef<const FUniqueNetId> UserIdPtr;

	/** Additional key/value pair data related to auth */
	TMap<FString, FString> AdditionalAuthData;
	/** Additional key/value pair data related to user attribution */
	TMap<FString, FString> UserAttributes;

private:
	FString Name;
};

/**
 * Null service implementation of the online identity interface
 */
class FOnlineIdentityZomboy : public IOnlineIdentity
{
public:

	// IOnlineIdentity

	virtual bool Login(int32 LocalUserNum, const FOnlineAccountCredentials& AccountCredentials) override;
	virtual bool Logout(int32 LocalUserNum) override;
	virtual bool AutoLogin(int32 LocalUserNum) override;
	virtual TSharedPtr<FUserOnlineAccount> GetUserAccount(const FUniqueNetId& UserId) const override;
	virtual TArray<TSharedPtr<FUserOnlineAccount> > GetAllUserAccounts() const override;
	virtual TSharedPtr<const FUniqueNetId> GetUniquePlayerId(int32 LocalUserNum) const override;
	virtual TSharedPtr<const FUniqueNetId> CreateUniquePlayerId(uint8* Bytes, int32 Size) override;
	virtual TSharedPtr<const FUniqueNetId> CreateUniquePlayerId(const FString& Str) override;
	virtual ELoginStatus::Type GetLoginStatus(int32 LocalUserNum) const override;
	virtual ELoginStatus::Type GetLoginStatus(const FUniqueNetId& UserId) const override;
	virtual FString GetPlayerNickname(int32 LocalUserNum) const override;
	virtual FString GetPlayerNickname(const FUniqueNetId& UserId) const override;
	virtual FString GetAuthToken(int32 LocalUserNum) const override;
	virtual void RevokeAuthToken(const FUniqueNetId& UserId, const FOnRevokeAuthTokenCompleteDelegate& Delegate) override;
	virtual void GetUserPrivilege(const FUniqueNetId& UserId, EUserPrivileges::Type Privilege, const FOnGetUserPrivilegeCompleteDelegate& Delegate) override;
	virtual FPlatformUserId GetPlatformUserIdFromUniqueNetId(const FUniqueNetId& UniqueNetId) const override;
	virtual FString GetAuthType() const override;

	// FOnlineIdentityZomboy

	/**
	 * Constructor
	 *
	 * @param InSubsystem online subsystem being used
	 */
	FOnlineIdentityZomboy(FOnlineSubsystemZomboy* InSubsystem);

	/**
	 * Destructor
	 */
	virtual ~FOnlineIdentityZomboy();

	void AddUniquePlayerId(int32 LocalUserNum, TSharedPtr<const FUniqueNetId> UserUniqueNetId);

	void AddUserAccount(FUniqueNetIdZomboyPlayer UserUniqueNetId, TSharedRef<FUserOnlineAccountZomboy> UserAccount);

	DEFINE_ONLINE_PLAYER_DELEGATE_TWO_PARAM(MAX_LOCAL_PLAYERS, OnLoadPlayerIconComplete, bool, const FZomboyOnlinePlayerIconInfo&);

	void LoadPlayerAvatarIcon(int32 LocalUserNum);
	void LoadPlayerAvatarIcon(const FUniqueNetId& UserId);
#if WITH_STEAM
	void LoadPlayerAvatarIconSteam(const FUniqueNetId& UserId);
#elif WITH_OCULUS
	void LoadPlayerAvatarIconOculus(const FUniqueNetId& UserId);
#endif

private:

	/**
	 * Should use the initialization constructor instead
	 */
	FOnlineIdentityZomboy() = delete;

	/** Cached pointer to owning subsystem */
	FOnlineSubsystemZomboy* ZomboySubsystem;

	/** Ids mapped to locally registered users */
	TMap<int32, TSharedPtr<const FUniqueNetId>> UserIds;

	/** Ids mapped to locally registered users */
	TMap<FUniqueNetIdZomboyPlayer, TSharedRef<FUserOnlineAccountZomboy>> UserAccounts;
};

typedef TSharedPtr<FOnlineIdentityZomboy, ESPMode::ThreadSafe> FOnlineIdentityZomboyPtr;
